Script started on lun 28 jul 2014 15:45:35 CEST
]0;nutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source[0;32mnutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source >[0;37m make ultraclean
rm -rf *.o
rm -f phase
]0;nutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source[0;32mnutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source >[0;37m make
g++ -Wall -DBIGDATASETS -I. -I.. -c phase.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from classpop.hpp:9,
                 from phase.cpp:5:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
phase.cpp: In function â€˜int main(int, char**)â€™:
phase.cpp:144:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                 for(int r=0; r<vecDelta.size(); r++)
                               ^
phase.cpp:149:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                 for(int r=0; r<vecDelta.size(); r++)
                               ^
phase.cpp:206:24: warning: unused variable â€˜MeanRhoStartâ€™ [-Wunused-variable]
                 double MeanRhoStart = d_cmdoptions["rhostart"];
                        ^
phase.cpp:94:9: warning: unused variable â€˜statusâ€™ [-Wunused-variable]
     int status = proc_args ( argc, argv, filenames, cmdoptions, d_cmdoptions, Niter, Nthin, Nburn);
         ^
g++ -Wall -DBIGDATASETS -I. -I.. -c indnode.cpp
In file included from /usr/include/c++/4.9.1/backward/strstream:51:0,
                 from indnode.cpp:12:
/usr/include/c++/4.9.1/backward/backward_warning.h:32:2: warning: #warning This file includes at least one deprecated or antiquated header which may be removed without further notice at a future date. Please use a non-deprecated interface with equivalent functionality instead. For a listing of replacement headers and interfaces, consult the file backward_warning.h. To disable this warning use -Wno-deprecated. [-Wcpp]
 #warning \
  ^
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from indnode.cpp:6:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
In file included from indnode.cpp:6:0:
indnode.hpp: In constructor â€˜CIndividual::CIndividual(std::string)â€™:
indnode.hpp:48:20: warning: â€˜CIndividual::recomâ€™ will be initialized after [-Wreorder]
   std::vector<int> recom; // list of sites after which a recom occurs in transmission from this ind
                    ^
indnode.hpp:47:20: warning:   â€˜std::vector<int> CIndividual::missingâ€™ [-Wreorder]
   std::vector<int> missing;
                    ^
indnode.cpp:26:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual ( string loci_type ) : 
 ^
In file included from indnode.cpp:6:0:
indnode.hpp:56:23: warning: â€˜CIndividual::knownâ€™ will be initialized after [-Wreorder]
     std::vector<int>  known; // phase known loci
                       ^
indnode.hpp:30:23: warning:   â€˜std::vector<Haplotype> CIndividual::phenotypeâ€™ [-Wreorder]
     vector<Haplotype> phenotype; // stores current guess of genotype
                       ^
indnode.cpp:26:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual ( string loci_type ) : 
 ^
In file included from indnode.cpp:6:0:
indnode.hpp: In copy constructor â€˜CIndividual::CIndividual(const CIndividual&)â€™:
indnode.hpp:48:20: warning: â€˜CIndividual::recomâ€™ will be initialized after [-Wreorder]
   std::vector<int> recom; // list of sites after which a recom occurs in transmission from this ind
                    ^
indnode.hpp:47:20: warning:   â€˜std::vector<int> CIndividual::missingâ€™ [-Wreorder]
   std::vector<int> missing;
                    ^
indnode.cpp:74:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C ) :
 ^
In file included from indnode.cpp:6:0:
indnode.hpp:56:23: warning: â€˜CIndividual::knownâ€™ will be initialized after [-Wreorder]
     std::vector<int>  known; // phase known loci
                       ^
indnode.hpp:30:23: warning:   â€˜std::vector<Haplotype> CIndividual::phenotypeâ€™ [-Wreorder]
     vector<Haplotype> phenotype; // stores current guess of genotype
                       ^
indnode.cpp:74:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C ) :
 ^
In file included from indnode.cpp:6:0:
indnode.hpp:37:29: warning: â€˜CIndividual::PhaseCountâ€™ will be initialized after [-Wreorder]
     vector< vector<float> > PhaseCount;
                             ^
indnode.hpp:36:39: warning:   â€˜std::vector<std::vector<std::vector<float> > > CIndividual::AlleleCountâ€™ [-Wreorder]
     vector< vector< vector<float> > > AlleleCount;
                                       ^
indnode.cpp:74:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C ) :
 ^
indnode.cpp:94:9: warning: unused variable â€˜nlociâ€™ [-Wunused-variable]
     int nloci = C.phase.size();
         ^
In file included from indnode.cpp:6:0:
indnode.hpp: In constructor â€˜CIndividual::CIndividual(const CIndividual&, int, int)â€™:
indnode.hpp:48:20: warning: â€˜CIndividual::recomâ€™ will be initialized after [-Wreorder]
   std::vector<int> recom; // list of sites after which a recom occurs in transmission from this ind
                    ^
indnode.hpp:47:20: warning:   â€˜std::vector<int> CIndividual::missingâ€™ [-Wreorder]
   std::vector<int> missing;
                    ^
indnode.cpp:102:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C, int firstlocus, int lastlocus ) :
 ^
In file included from indnode.cpp:6:0:
indnode.hpp:56:23: warning: â€˜CIndividual::knownâ€™ will be initialized after [-Wreorder]
     std::vector<int>  known; // phase known loci
                       ^
indnode.hpp:30:23: warning:   â€˜std::vector<Haplotype> CIndividual::phenotypeâ€™ [-Wreorder]
     vector<Haplotype> phenotype; // stores current guess of genotype
                       ^
indnode.cpp:102:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C, int firstlocus, int lastlocus ) :
 ^
In file included from indnode.cpp:6:0:
indnode.hpp: In constructor â€˜CIndividual::CIndividual(const CIndividual&, const CIndividual&)â€™:
indnode.hpp:56:23: warning: â€˜CIndividual::knownâ€™ will be initialized after [-Wreorder]
     std::vector<int>  known; // phase known loci
                       ^
indnode.hpp:48:20: warning:   â€˜std::vector<int> CIndividual::recomâ€™ [-Wreorder]
   std::vector<int> recom; // list of sites after which a recom occurs in transmission from this ind
                    ^
indnode.cpp:177:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C1,  const CIndividual & C2 ) :
 ^
In file included from indnode.cpp:6:0:
indnode.hpp:48:20: warning: â€˜CIndividual::recomâ€™ will be initialized after [-Wreorder]
   std::vector<int> recom; // list of sites after which a recom occurs in transmission from this ind
                    ^
indnode.hpp:30:23: warning:   â€˜std::vector<Haplotype> CIndividual::phenotypeâ€™ [-Wreorder]
     vector<Haplotype> phenotype; // stores current guess of genotype
                       ^
indnode.cpp:177:1: warning:   when initialized here [-Wreorder]
 CIndividual::CIndividual( const CIndividual & C1,  const CIndividual & C2 ) :
 ^
indnode.cpp: In destructor â€˜CIndividual::~CIndividual()â€™:
indnode.cpp:271:9: warning: unused variable â€˜nlociâ€™ [-Wunused-variable]
     int nloci = phase.size();
         ^
indnode.cpp: In member function â€˜Haplotype CIndividual::get_haplotype(int) constâ€™:
indnode.cpp:334:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int locus = 0; locus < phase.size(); ++locus) {
                             ^
indnode.cpp: In member function â€˜int CIndividual::read_orig_phenotypes(std::istream&, const string&, int, int)â€™:
indnode.cpp:365:40: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for ( int locus = 0; locus < loci_type.size(); ++locus) {
                                        ^
indnode.cpp:371:36: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for ( int locus = 0; locus < loci_type.size(); ++locus ) {
                                    ^
indnode.cpp:378:34: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for ( int locus = 0; locus < loci_type.size(); ++locus ) { 
                                  ^
indnode.cpp: In member function â€˜void CIndividual::print_phenotypes(std::ostream&, const string&, const std::vector<int>*) constâ€™:
indnode.cpp:442:35: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (int locus = 0; locus < loci_type.size(); ++locus ) {
                                   ^
indnode.cpp: In member function â€˜int CIndividual::BestAllele(int, int) constâ€™:
indnode.cpp:460:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int j=1; j<AlleleCount[chr][locus].size(); j++){
                 ^
indnode.cpp: In member function â€˜double CIndividual::BestAlleleProb(int, int) constâ€™:
indnode.cpp:470:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int j=0; j<AlleleCount[chr][locus].size(); j++){
                 ^
indnode.cpp: In member function â€˜Haplotype CIndividual::BestHaplotype(int) constâ€™:
indnode.cpp:506:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int locus = 0; locus < phase.size(); ++locus) {
                             ^
indnode.cpp: In member function â€˜void CIndividual::print_haplotype(int, std::ostream&, const string&, const std::vector<int>*, bool, bool, bool, double, double) constâ€™:
indnode.cpp:600:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int locus = 0; locus < loci_type.size(); ++locus ) 
                             ^
indnode.cpp: In member function â€˜void CIndividual::print_phase(std::ostream&, bool) constâ€™:
indnode.cpp:619:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int r = 0; r < phase.size(); ++r) {
                       ^
indnode.cpp: In member function â€˜void CIndividual::print_phase_prob(std::ostream&, bool) constâ€™:
indnode.cpp:632:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int r = 0; r < phase.size(); ++r) {
                       ^
indnode.cpp: In member function â€˜int CIndividual::initialize(int, std::istream&, int, std::istream&, const string&)â€™:
indnode.cpp:652:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int locus = 0; locus < phase.size(); ++locus) {
                               ^
indnode.cpp:710:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for (int locus = 0; locus < phase.size(); ++locus) {
                                 ^
indnode.cpp:784:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for (int locus = 0; locus < phase.size(); ++locus) {
                                 ^
indnode.cpp: In member function â€˜void CIndividual::ResetCounts()â€™:
indnode.cpp:830:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for(int j=0; j< AlleleCount[c][r].size(); j++){
                     ^
indnode.cpp: In member function â€˜void CIndividual::TransferCounts(Summary&)â€™:
indnode.cpp:935:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int segment = 0; segment < sum.alleleprob.size(); segment++){
                                 ^
indnode.cpp:936:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int pos = 0; pos < sum.alleleprob[segment].size(); pos++){
                           ^
indnode.cpp:937:34: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for(int allele = 0; allele < AlleleCount[0][locus].size(); allele++){
                                  ^
indnode.cpp: In function â€˜bool CanBeFoundAtAll(const Haplotype&, const std::vector<CIndividual>&)â€™:
indnode.cpp:957:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int ind = 0; ind < pop.size(); ind++){
                        ^
g++ -Wall -DBIGDATASETS -I. -I.. -c utility.cpp
utility.cpp: In function â€˜int rint2(const std::vector<double>&, double)â€™:
utility.cpp:486:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for (int i = 0; i < prob.size() - 1; ++i) {
                               ^
utility.cpp:495:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for (int i = 0; i < cumprob.size() - 1; ++i) {
                               ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayQ.cpp
In file included from arrayQ.cpp:8:0:
arrayQ.hpp: In constructor â€˜ArrayQ::ArrayQ()â€™:
arrayQ.hpp:19:9: warning: â€˜ArrayQ::nallelesâ€™ will be initialized after [-Wreorder]
     int nalleles; // Number of alleles
         ^
arrayQ.hpp:17:16: warning:   â€˜double**** ArrayQ::arrayâ€™ [-Wreorder]
     double ****array;
                ^
arrayQ.cpp:19:1: warning:   when initialized here [-Wreorder]
 ArrayQ::ArrayQ ():
 ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayFF.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from arrayFF.hpp:14,
                 from arrayFF.cpp:5:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayCC.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from arrayCC.hpp:7,
                 from arrayCC.cpp:1:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayDiffProb.cpp
arrayDiffProb.cpp: In member function â€˜void ArrayDiffProb::CalcDiffProb(const std::vector<ArrayQ*>&, const string&)â€™:
arrayDiffProb.cpp:86:47: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   while((LociType[firstSNP]!='S') && (firstSNP<(LociType.size()-1)))
                                               ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayDiploidDiffProb.cpp
arrayDiploidDiffProb.cpp: In member function â€˜void ArrayDiploidDiffProb::CalcDiploidDiffProb(const std::vector<ArrayQ*>&, const string&)â€™:
arrayDiploidDiffProb.cpp:106:47: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   while((LociType[firstSNP]!='S') && (firstSNP<(LociType.size()-1)))
                                               ^
g++ -Wall -DBIGDATASETS -I. -I.. -c arrayDiffCount.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from arrayCC.hpp:7,
                 from arrayDiffCount.hpp:5,
                 from arrayDiffCount.cpp:1:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
arrayDiffCount.cpp: In member function â€˜void ArrayDiffCount::Update(int, const std::vector<CIndividual>&, int, int, int)â€™:
arrayDiffCount.cpp:163:7: warning: unused variable â€˜adjustâ€™ [-Wunused-variable]
   int adjust;
       ^
g++ -Wall -DBIGDATASETS -I. -I.. -c HapList2.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from HapList2.hpp:9,
                 from HapList2.cpp:1:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
HapList2.cpp: In member function â€˜void HapList::PrunePairsIndex(std::vector<std::vector<std::pair<std::_Rb_tree_iterator<std::pair<const Haplotype, HapRecord> >, std::_Rb_tree_iterator<std::pair<const Haplotype, HapRecord> > > > >&, std::vector<std::vector<double> >&, std::vector<CIndividual>&, double)â€™:
HapList2.cpp:555:8: warning: unused variable â€˜foundâ€™ [-Wunused-variable]
   bool found;
        ^
HapList2.cpp: In member function â€˜std::vector<Summary> HapList::ProduceSummary(std::vector<std::vector<std::pair<std::_Rb_tree_iterator<std::pair<const Haplotype, HapRecord> >, std::_Rb_tree_iterator<std::pair<const Haplotype, HapRecord> > > > >&, std::vector<std::vector<double> >&, int, int, std::vector<CIndividual>&, bool)â€™:
HapList2.cpp:1157:9: warning: variable â€˜bestsplitlocusâ€™ set but not used [-Wunused-but-set-variable]
     int bestsplitlocus = 0;
         ^
HapList2.cpp: In member function â€˜double HapList::FDLSProb(const Haplotype&, const std::vector<ArrayQ*>&, int, std::vector<double>&, std::vector<double>&, bool, bool, std::vector<int>, const std::vector<double>&, int, bool)â€™:
HapList2.cpp:1410:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for(int locus=0; locus<TransProb.size(); locus++){
                             ^
HapList2.cpp: In member function â€˜double HapList::ForwardsAlgorithm(const Haplotype&, const std::vector<ArrayQ*>&, int, std::vector<double>&, std::vector<std::vector<double> >&, std::vector<double>&, bool, const std::vector<int>&, bool, const std::vector<double>&, int)â€™:
HapList2.cpp:1470:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int locus=0; locus<TransProb.size(); locus++)
                         ^
HapList2.cpp: In member function â€˜void HapList::BackwardsAlgorithm(const Haplotype&, int, std::vector<double>&, std::vector<std::vector<double> >&, std::vector<double>&, std::vector<int>&, std::vector<int>&, std::vector<int>&, bool)â€™:
HapList2.cpp:1555:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int locus = 0; locus < TransProb.size(); locus++){ 
                            ^
HapList2.cpp: In member function â€˜void HapList::ComputeHiddenStateProbs(std::vector<std::vector<double> >&, const Haplotype&, const std::vector<ArrayQ*>&, int, std::vector<double>&, bool, const std::vector<int>&, const std::vector<double>&, int)â€™:
HapList2.cpp:1626:10: warning: unused variable â€˜aâ€™ [-Wunused-variable]
   double a=ForwardsAlgorithm(h, Q, nchr, vecRho, Alpha, AlphaSum, usequad, isunknown, false , vecTheta, Nforcorrection );
          ^
HapList2.cpp:1627:10: warning: unused variable â€˜bâ€™ [-Wunused-variable]
   double b=ForwardsAlgorithm(h, Q, nchr, vecRho, Beta, BetaSum, usequad, isunknown, true , vecTheta, Nforcorrection );
          ^
HapList2.cpp: In member function â€˜double HapList::FuzzyForwardsAlgorithm(const Haplotype&, const std::vector<ArrayQ*>&, int, std::vector<double>&, std::vector<std::vector<double> >&, std::vector<double>&, bool, const std::vector<int>&, bool, const std::vector<double>&, int)â€™:
HapList2.cpp:1753:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int locus=0; locus<TransProb.size(); locus++)
                         ^
HapList2.cpp: In member function â€˜double HapList::CalcProb(const Haplotype&, char, std::vector<ArrayQ*>&, int, std::vector<double>&, double, const std::vector<int>&, bool, const std::vector<double>&, bool)â€™:
HapList2.cpp:1248:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
g++ -Wall -DBIGDATASETS -I. -I.. -c Haplotype.cpp
In file included from Haplotype.cpp:1:0:
Haplotype.hpp: In constructor â€˜Haplotype::Haplotype(std::string)â€™:
Haplotype.hpp:14:10: warning: â€˜Haplotype::locus_typeâ€™ will be initialized after [-Wreorder]
   string locus_type; //stores whether ith locus is SNP or MS
          ^
Haplotype.hpp:13:17: warning:   â€˜std::vector<float> Haplotype::hâ€™ [-Wreorder]
   vector<float> h;
                 ^
Haplotype.cpp:5:1: warning:   when initialized here [-Wreorder]
 Haplotype::Haplotype(string lt):
 ^
Haplotype.cpp: In member function â€˜void Haplotype::print_haplotype(std::ostream&, const std::vector<int>*) constâ€™:
Haplotype.cpp:70:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int locus =0; locus<h.size(); locus++){
                          ^
g++ -Wall -DBIGDATASETS -I. -I.. -c classpop.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from classpop.hpp:9,
                 from classpop.cpp:6:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
In file included from classpop.cpp:6:0:
classpop.hpp: In constructor â€˜ClassPop::ClassPop()â€™:
classpop.hpp:35:23: warning: â€˜ClassPop::popâ€™ will be initialized after [-Wreorder]
   vector<CIndividual> pop;    // Vector of individuals
                       ^
classpop.hpp:32:7: warning:   â€˜int ClassPop::Nindâ€™ [-Wreorder]
   int Nind;
       ^
classpop.cpp:31:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop () :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:95:11: warning: â€˜ClassPop::haplistâ€™ will be initialized after [-Wreorder]
   HapList haplist;
           ^
classpop.hpp:44:10: warning:   â€˜std::string ClassPop::loci_typeâ€™ [-Wreorder]
   string loci_type;           // Loci types
          ^
classpop.cpp:31:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop () :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:57:18: warning: â€˜ClassPop::leftâ€™ will be initialized after [-Wreorder]
   vector<double> left;
                  ^
classpop.hpp:56:18: warning:   â€˜std::vector<double> ClassPop::lambdaâ€™ [-Wreorder]
   vector<double> lambda;
                  ^
classpop.cpp:31:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop () :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:82:9: warning: â€˜ClassPop::TREATSNPSASMSâ€™ will be initialized after [-Wreorder]
     int TREATSNPSASMS;
         ^
classpop.hpp:64:20: warning:   â€˜std::vector<ArrayQ*> ClassPop::Qptrâ€™ [-Wreorder]
   vector<ArrayQ *> Qptr;
                    ^
classpop.cpp:31:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop () :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp: In copy constructor â€˜ClassPop::ClassPop(const ClassPop&)â€™:
classpop.hpp:40:15: warning: â€˜ClassPop::groupsizeâ€™ will be initialized after [-Wreorder]
   vector<int> groupsize; // number of chromosomes in each group
               ^
classpop.hpp:31:7: warning:   â€˜int ClassPop::Nlociâ€™ [-Wreorder]
   int Nloci;
       ^
classpop.cpp:72:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2 ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:44:10: warning: â€˜ClassPop::loci_typeâ€™ will be initialized after [-Wreorder]
   string loci_type;           // Loci types
          ^
classpop.hpp:35:23: warning:   â€˜std::vector<CIndividual> ClassPop::popâ€™ [-Wreorder]
   vector<CIndividual> pop;    // Vector of individuals
                       ^
classpop.cpp:72:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2 ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:57:18: warning: â€˜ClassPop::leftâ€™ will be initialized after [-Wreorder]
   vector<double> left;
                  ^
classpop.hpp:56:18: warning:   â€˜std::vector<double> ClassPop::lambdaâ€™ [-Wreorder]
   vector<double> lambda;
                  ^
classpop.cpp:72:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2 ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:84:17: warning: â€˜ClassPop::nonSNPlistâ€™ will be initialized after [-Wreorder]
     vector<int> nonSNPlist;
                 ^
classpop.hpp:64:20: warning:   â€˜std::vector<ArrayQ*> ClassPop::Qptrâ€™ [-Wreorder]
   vector<ArrayQ *> Qptr;
                    ^
classpop.cpp:72:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2 ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp: In constructor â€˜ClassPop::ClassPop(const ClassPop&, int, int)â€™:
classpop.hpp:40:15: warning: â€˜ClassPop::groupsizeâ€™ will be initialized after [-Wreorder]
   vector<int> groupsize; // number of chromosomes in each group
               ^
classpop.hpp:31:7: warning:   â€˜int ClassPop::Nlociâ€™ [-Wreorder]
   int Nloci;
       ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:44:10: warning: â€˜ClassPop::loci_typeâ€™ will be initialized after [-Wreorder]
   string loci_type;           // Loci types
          ^
classpop.hpp:35:23: warning:   â€˜std::vector<CIndividual> ClassPop::popâ€™ [-Wreorder]
   vector<CIndividual> pop;    // Vector of individuals
                       ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:57:18: warning: â€˜ClassPop::leftâ€™ will be initialized after [-Wreorder]
   vector<double> left;
                  ^
classpop.hpp:56:18: warning:   â€˜std::vector<double> ClassPop::lambdaâ€™ [-Wreorder]
   vector<double> lambda;
                  ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:95:11: warning: â€˜ClassPop::haplistâ€™ will be initialized after [-Wreorder]
   HapList haplist;
           ^
classpop.hpp:82:9: warning:   â€˜int ClassPop::TREATSNPSASMSâ€™ [-Wreorder]
     int TREATSNPSASMS;
         ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:82:9: warning: â€˜ClassPop::TREATSNPSASMSâ€™ will be initialized after [-Wreorder]
     int TREATSNPSASMS;
         ^
classpop.hpp:64:20: warning:   â€˜std::vector<ArrayQ*> ClassPop::Qptrâ€™ [-Wreorder]
   vector<ArrayQ *> Qptr;
                    ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:88:18: warning: â€˜ClassPop::DiffCountâ€™ will be initialized after [-Wreorder]
   ArrayDiffCount DiffCount; //DiffCount stores the number of differences between each pair of haplotypes at SNP positions 
                  ^
classpop.hpp:80:9: warning:   â€˜int ClassPop::NSNPâ€™ [-Wreorder]
     int NSNP;
         ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:84:17: warning: â€˜ClassPop::nonSNPlistâ€™ will be initialized after [-Wreorder]
     vector<int> nonSNPlist;
                 ^
classpop.hpp:81:9: warning:   â€˜int ClassPop::ALLSNPâ€™ [-Wreorder]
     int ALLSNP;
         ^
classpop.cpp:115:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & cpop2, int firstlocus, int lastlocus ) : 
 ^
In file included from classpop.cpp:6:0:
classpop.hpp: In constructor â€˜ClassPop::ClassPop(const ClassPop&, const ClassPop&, double)â€™:
classpop.hpp:40:15: warning: â€˜ClassPop::groupsizeâ€™ will be initialized after [-Wreorder]
   vector<int> groupsize; // number of chromosomes in each group
               ^
classpop.hpp:31:7: warning:   â€˜int ClassPop::Nlociâ€™ [-Wreorder]
   int Nloci;
       ^
classpop.cpp:214:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:44:10: warning: â€˜ClassPop::loci_typeâ€™ will be initialized after [-Wreorder]
   string loci_type;           // Loci types
          ^
classpop.hpp:35:23: warning:   â€˜std::vector<CIndividual> ClassPop::popâ€™ [-Wreorder]
   vector<CIndividual> pop;    // Vector of individuals
                       ^
classpop.cpp:214:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:57:18: warning: â€˜ClassPop::leftâ€™ will be initialized after [-Wreorder]
   vector<double> left;
                  ^
classpop.hpp:56:18: warning:   â€˜std::vector<double> ClassPop::lambdaâ€™ [-Wreorder]
   vector<double> lambda;
                  ^
classpop.cpp:214:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:84:17: warning: â€˜ClassPop::nonSNPlistâ€™ will be initialized after [-Wreorder]
     vector<int> nonSNPlist;
                 ^
classpop.hpp:64:20: warning:   â€˜std::vector<ArrayQ*> ClassPop::Qptrâ€™ [-Wreorder]
   vector<ArrayQ *> Qptr;
                    ^
classpop.cpp:214:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp: In constructor â€˜ClassPop::ClassPop(const ClassPop&, const ClassPop&, std::map<std::basic_string<char>, int>&, int, double, std::vector<double>&, std::map<std::basic_string<char>, double>&, double)â€™:
classpop.hpp:40:15: warning: â€˜ClassPop::groupsizeâ€™ will be initialized after [-Wreorder]
   vector<int> groupsize; // number of chromosomes in each group
               ^
classpop.hpp:31:7: warning:   â€˜int ClassPop::Nlociâ€™ [-Wreorder]
   int Nloci;
       ^
classpop.cpp:309:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, map<string, int> & cmds, int Niter, double theta, vector<double> & vecDelta, map<string, double> & d_cmds, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:44:10: warning: â€˜ClassPop::loci_typeâ€™ will be initialized after [-Wreorder]
   string loci_type;           // Loci types
          ^
classpop.hpp:35:23: warning:   â€˜std::vector<CIndividual> ClassPop::popâ€™ [-Wreorder]
   vector<CIndividual> pop;    // Vector of individuals
                       ^
classpop.cpp:309:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, map<string, int> & cmds, int Niter, double theta, vector<double> & vecDelta, map<string, double> & d_cmds, double minfreq ) :
 ^
In file included from classpop.cpp:6:0:
classpop.hpp:84:17: warning: â€˜ClassPop::nonSNPlistâ€™ will be initialized after [-Wreorder]
     vector<int> nonSNPlist;
                 ^
classpop.hpp:64:20: warning:   â€˜std::vector<ArrayQ*> ClassPop::Qptrâ€™ [-Wreorder]
   vector<ArrayQ *> Qptr;
                    ^
classpop.cpp:309:1: warning:   when initialized here [-Wreorder]
 ClassPop::ClassPop ( const ClassPop & CP1, const ClassPop & CP2, map<string, int> & cmds, int Niter, double theta, vector<double> & vecDelta, map<string, double> & d_cmds, double minfreq ) :
 ^
classpop.cpp: In member function â€˜void ClassPop::read_data(std::istream&, std::map<std::basic_string<char>, int>&, std::map<std::basic_string<char>, double>&, std::map<std::basic_string<char>, std::basic_string<char> >&)â€™:
classpop.cpp:536:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    while( position.size() < Nloci){
                           ^
classpop.cpp:565:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  while ( loci_type.size() < Nloci ) {
                           ^
classpop.cpp: In member function â€˜void ClassPop::initialize(std::istream&, std::istream&, int, int, double, std::vector<double>&, int)â€™:
classpop.cpp:699:7: warning: unused variable â€˜countâ€™ [-Wunused-variable]
   int count = 0;
       ^
classpop.cpp: In member function â€˜void ClassPop::GibbsUpdate(int, double)â€™:
classpop.cpp:1073:7: warning: unused variable â€˜câ€™ [-Wunused-variable]
   int c,r,r0,newhappos;
       ^
classpop.cpp:1073:9: warning: unused variable â€˜râ€™ [-Wunused-variable]
   int c,r,r0,newhappos;
         ^
classpop.cpp:1073:11: warning: unused variable â€˜r0â€™ [-Wunused-variable]
   int c,r,r0,newhappos;
           ^
classpop.cpp:1101:10: warning: unused variable â€˜randprobâ€™ [-Wunused-variable]
   double randprob=exp(2*(log(dirprior)-Nloci*log(2.0)) + (pop[n1].numunknown()-1)*log(2.0));
          ^
classpop.cpp: In member function â€˜void ClassPop::update_phase_NR(int, ArrayFF&, const ArrayDiffProb&, const ArrayDiploidDiffProb&)â€™:
classpop.cpp:1906:9: warning: unused variable â€˜râ€™ [-Wunused-variable]
     int r = 0;
         ^
classpop.cpp: In member function â€˜int ClassPop::update_phase_NR_fastestforsmallr(int, const ArrayDiffProb&, int)â€™:
classpop.cpp:2014:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     if( updatelist.size() > maxnpos) {
                           ^
classpop.cpp:2019:47: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(unsigned i = updatelist.size(); i > maxnpos; --i){
                                               ^
classpop.cpp: In member function â€˜bool ClassPop::updateRhoSimpleHotspot(bool, std::map<std::basic_string<char>, double>&)â€™:
classpop.cpp:2449:8: warning: unused variable â€˜acceptâ€™ [-Wunused-variable]
   bool accept;
        ^
classpop.cpp:2450:10: warning: unused variable â€˜lpriorratioâ€™ [-Wunused-variable]
   double lpriorratio;
          ^
classpop.cpp: In member function â€˜double ClassPop::BuddyHapListMCMCResolvePhaseRemove(std::map<std::basic_string<char>, int>&, int, int, int, std::map<std::basic_string<char>, double>&, std::string, bool)â€™:
classpop.cpp:2911:5: warning: suggest explicit braces to avoid ambiguous â€˜elseâ€™ [-Wparentheses]
   if(method == 'Q') // for Q method, use no recom, except on the final run
     ^
classpop.cpp:3438:11: warning: unused variable â€˜pâ€™ [-Wunused-variable]
    double p;
           ^
classpop.cpp:2898:10: warning: unused variable â€˜rhoâ€™ [-Wunused-variable]
   double rho = d_cmds["rhostart"];
          ^
classpop.cpp:2990:8: warning: unused variable â€˜foundâ€™ [-Wunused-variable]
   bool found;
        ^
classpop.cpp: In member function â€˜double ClassPop::HapListMCMCResolvePhaseRemove(std::map<std::basic_string<char>, int>&, int, int, int, std::map<std::basic_string<char>, double>&, std::string, bool)â€™:
classpop.cpp:3758:5: warning: suggest explicit braces to avoid ambiguous â€˜elseâ€™ [-Wparentheses]
   if(method == 'Q') // for Q method, use no recom, except on the final run
     ^
classpop.cpp:3745:10: warning: unused variable â€˜rhoâ€™ [-Wunused-variable]
   double rho = d_cmds["rhostart"];
          ^
classpop.cpp:3838:8: warning: unused variable â€˜foundâ€™ [-Wunused-variable]
   bool found;
        ^
classpop.cpp: In member function â€˜double ClassPop::FuzzyHapListMCMCResolvePhaseRemove(std::map<std::basic_string<char>, int>&, int, int, int, std::map<std::basic_string<char>, double>&, std::string, bool)â€™:
classpop.cpp:4428:5: warning: suggest explicit braces to avoid ambiguous â€˜elseâ€™ [-Wparentheses]
   if(method == 'Q') // for Q method, use no recom, except on the final run
     ^
classpop.cpp:4415:10: warning: unused variable â€˜rhoâ€™ [-Wunused-variable]
   double rho = d_cmds["rhostart"];
          ^
classpop.cpp:4507:8: warning: unused variable â€˜foundâ€™ [-Wunused-variable]
   bool found;
        ^
classpop.cpp: In member function â€˜int ClassPop::update_phase_NR_fastestforsmallr(int, const ArrayDiffProb&, int)â€™:
classpop.cpp:2069:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
g++ -Wall -DBIGDATASETS -I. -I.. -c recom.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from classpop.hpp:9,
                 from recom.cpp:1:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
recom.cpp: In member function â€˜void ClassPop::resolve_phase_R(double, double, int, int, int, std::ostream&, std::ostream&, std::vector<double>&, int)â€™:
recom.cpp:71:12: warning: unused variable â€˜currentbestâ€™ [-Wunused-variable]
     double currentbest=-1e100;
            ^
recom.cpp:72:12: warning: unused variable â€˜lastlogprobâ€™ [-Wunused-variable]
     double lastlogprob=-1e100;
            ^
recom.cpp:75:12: warning: unused variable â€˜oldlogprobâ€™ [-Wunused-variable]
     double oldlogprob = -1e100;
            ^
recom.cpp: In member function â€˜double ClassPop::DiploidForwardsAlg(std::vector<std::vector<double> >&, int, std::vector<double>&)â€™:
recom.cpp:774:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for(int r = 1; r < loci_type.size(); ++r) {
                    ^
recom.cpp: In member function â€˜void ClassPop::DiploidBackwardsAlg(int, double, double, std::vector<std::vector<double> >&, std::vector<double>&, double, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&)â€™:
recom.cpp:947:9: warning: unused variable â€˜observedallele0â€™ [-Wunused-variable]
     int observedallele0 = pop[n].get_orig_allele(0,r);
         ^
recom.cpp:948:9: warning: unused variable â€˜observedallele1â€™ [-Wunused-variable]
     int observedallele1 = pop[n].get_orig_allele(1,r);    
         ^
g++ -Wall -DBIGDATASETS -I. -I.. -c HapPairList.cpp
In file included from /usr/include/c++/4.9.1/cassert:43:0,
                 from indnode.hpp:18,
                 from HapPairList.hpp:10,
                 from HapPairList.cpp:1:
indnode.hpp: In member function â€˜int CIndividual::n_missing(int) constâ€™:
indnode.hpp:368:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( locus < missing.size() );
                    ^
indnode.hpp: In member function â€˜int CIndividual::get_unknown_pos(int) constâ€™:
indnode.hpp:423:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     assert ( count < unknown.size() );
                    ^
g++ -Wall -DBIGDATASETS -I. -I.. -c Summary.cpp
Summary.cpp: In member function â€˜void Summary::Output(std::ostream&, std::vector<int>*)â€™:
Summary.cpp:73:10: warning: unused variable â€˜startlocusâ€™ [-Wunused-variable]
   double startlocus = 0;
          ^
cc    -c -o mt19937ar.o mt19937ar.c
g++ -Wall -DBIGDATASETS -I. -I.. -c pacb.lookup.cpp
g++ -Wall -DBIGDATASETS -I. -I.. -I. -I.. phase.o indnode.o utility.o arrayQ.o arrayFF.o arrayCC.o arrayDiffProb.o arrayDiploidDiffProb.o arrayDiffCount.o HapList2.o Haplotype.o classpop.o recom.o HapPairList.o Summary.o mt19937ar.o pacb.lookup.o  -o PHASE  -lm
]0;nutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source[0;32mnutria@fbx:~/github_rafalcode/phase/src/phase.2.1.1.source >[0;37m exit
exit

Script done on lun 28 jul 2014 15:46:15 CEST
